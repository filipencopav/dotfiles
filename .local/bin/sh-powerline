#!/bin/sh

EXIT_CODE=$?
RESET='[0m'
FG_RED='[31m'
FG_GREEN='[32m'
FG_BLUE='[34m'
FG_CYAN='[36m'
BOLD='[1m'

SYMBOL_GIT_BRANCH='â‘‚'
SYMBOL_GIT_MODIFIED='*'
SYMBOL_GIT_PUSH='â†‘'
SYMBOL_GIT_PULL='â†“'

set_exit_code_color() {
	[ "$EXIT_CODE" -eq 0 ] && printf '%s' "$FG_GREEN" || printf '%s' "$FG_RED"
}

__git() {
	git_eng="env LANG=C git"
	ref="$($git_eng symbolic-ref --short HEAD 2>/dev/null)"
	[ -n "$ref" ] && ref="$SYMBOL_GIT_BRANCH$ref" || ref="$($git_eng describe --tags --always 2>/dev/null)"
	[ -n "$ref" ] || return;

	git status --porcelain --branch 2>/dev/null | {
		SYMBOL_GIT_PUSH='â†‘'
		SYMBOL_GIT_PULL='â†“'
		while IFS= read -r line
		do
			if echo "$line" | grep -E -q '^##'
			then
				echo "$line" | grep -E -q 'ahead' &&
					marks="$marks $SYMBOL_GIT_PUSH$(echo "$line" | sed 's/.*\[ahead //g' | sed 's/\].*//g')"
				echo "$line" | grep -E -q 'behind' &&
					marks="$marks $SYMBOL_GIT_PULL$(echo "$line" | sed 's/.*\[behind //g' | sed 's/\].*//g')"
			else
				marks="$SYMBOL_GIT_MODIFIED$marks"
				break
			fi
		done
		printf ' %s%s' "$ref" "$marks"
	}
}


printf '%s' "$BOLD"
printf '%s' "$FG_BLUE"
CWD="$(pwd)"
printf "[${CWD##*/}]"
printf '%s' "$RESET"
printf '%s' "$FG_CYAN"
__git
set_exit_code_color
printf " Â» "
printf '%s' "$RESET"
